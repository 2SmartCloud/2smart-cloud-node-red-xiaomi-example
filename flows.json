[{"id":"41b7dde4f9feb336","type":"tab","label":"Flow 1","disabled":false,"info":"","env":[]},{"id":"fd47294283c45fe8","type":"xiaomi-gateway-config","name":"Home","address":"192.168.1.76","port":"9898","key":"3564869d1d76cf26a16cb1845dc33da2"},{"id":"889c890f.1ded38","type":"xiaomi-gateway-config","name":"Xiaomi Gateway","address":"192.168.1.76","port":"9898","key":"3564869d1d76cf26a16cb1845dc33da2"},{"id":"4bc10a21.a9630c","type":"mqtt-broker","name":"EMQX broker","broker":"localhost","port":"1883","tls":"4b673189.55848","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":4,"keepalive":"60","cleansession":true,"autoUnsubscribe":true,"birthTopic":"sweet-home/123/$state","birthQos":"0","birthRetain":"true","birthPayload":"init","closeTopic":"sweet-home/123/$state","closeQos":"0","closeRetain":"true","closePayload":"lost","willTopic":"sweet-home/123/$state","willQos":"0","willRetain":"true","willPayload":"lost"},{"id":"4b673189.55848","type":"tls-config","name":"","cert":"","key":"","ca":"","certname":"server-cert.pem","keyname":"","caname":"","servername":"","verifyservercert":true},{"id":"ffc6d47eeb474ee7","type":"mqtt-broker","name":"Cloud MQTT","broker":"fake","port":"","tls":"52d0fa22bf9fafdb","clientid":"","autoConnect":false,"usetls":true,"protocolVersion":"4","keepalive":"60","cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"52d0fa22bf9fafdb","type":"tls-config","name":"2Smart cloud","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":true,"alpnprotocol":""},{"id":"c9a629ca753514f9","type":"xiaomi-gateway","z":"41b7dde4f9feb336","gateway":"889c890f.1ded38","name":"Xiaomi Gateway","healthcheck":"30","x":119,"y":816,"wires":[["bb1c6563a54dac79"]]},{"id":"bb1c6563a54dac79","type":"function","z":"41b7dde4f9feb336","name":"Handle GW message","func":"const setCfg = flow.get('setCfg');\nconst getCfg = flow.get('getCfg');\nconst device = getCfg('device');\n\nswitch(msg.payload.cmd) {\n    case 'write_ack':\n    case 'report':\n        return [msg, null];\n    case 'disconnected':\n        setCfg('gwStatus', 'disconnected');\n        device.state = 'disconnected';\n        return [null, { payload: { state: 'disconnected' } }];\n    default:\n        break;\n}\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":359,"y":816,"wires":[["6c6c68a34bafb5c9"],["c92db23cf7948782"]]},{"id":"1e460f33ac6377a3","type":"function","z":"41b7dde4f9feb336","name":"Default CFG","func":"function setCfg(key, value) {\n    flow.set(key, value, 'default'); // ram\n    flow.set(key, value, 'file'); // filestorage\n}\n\nfunction getCfg(key) {\n    return flow.get(key);\n}\n\nfunction getModelId(model) {\n    let sanitized = model.replace(/[^a-z0-9-]/g, '-');\n\n    sanitized = sanitized.replace(/^-+|-+$/g, '');\n\n    return sanitized;\n}\n\nfunction beautifyModelId(id) {\n    let beautified = id.replace(/-/g, ' ');\n\n    beautified = beautified.replace(/\\b\\w/g, function(char) {\n        return char.toUpperCase();\n    });\n\n    return beautified;\n}\n\nfunction getSensorId(model, sid) {\n    let cfg = getCfg('MODEL_SID_TREE');\n    const validModelId = getModelId(model);\n\n    if (!cfg) cfg = {};\n    if (!cfg[model]) cfg[model] = [];\n\n    let idx = cfg[model].indexOf(sid);\n    idx = idx === -1 ? cfg[model].push(sid) - 1 : idx;\n\n    setCfg('MODEL_SID_TREE', cfg);\n\n    return `${validModelId}-${idx}`;\n}\n\nfunction prepareTopic(topic) {\n    const rootTopic = getCfg('rootTopic');\n    const deviceId = getCfg('deviceId');\n\n    return `${rootTopic}/${deviceId}/${topic}`\n}\n\nconst MQTT_LOGIN  = '';\nconst MQTT_PASS   = '';\nconst DEVICE_ID   = '';\nconst PRODUCT_ID  = '';\nconst PRODUCT_VER = '1';\n\nsetCfg('MQTT_URI', 'mqtts://cloud.2smart.com:8883');\nsetCfg('MQTT_USER', MQTT_LOGIN);\nsetCfg('MQTT_PASS', MQTT_PASS);\n\nsetCfg('rootTopic', `${MQTT_LOGIN}/sweet-home`);\nsetCfg('errorTopic', 'errors');\nsetCfg('deviceId', DEVICE_ID);\nsetCfg('color', {\n    red: '255', green: '255', blue: '255', brightness: '30'\n});\nsetCfg('gwStatus', 'disconnected');\n\n\nconst device = {\n    name            : 'Xiaomi Gateway',\n    mac             : 'unknown',\n    localIp         : '0.0.0.0',\n    implementation  : '-',\n    state           : 'init',\n    firmwareName    : PRODUCT_ID,\n    firmwareVersion : PRODUCT_VER,\n    nodes           : {},\n    options         : {}\n};\n\nif (!getCfg('TOPIC_SID_MAP')) setCfg('TOPIC_SID_MAP', {});\nif (!getCfg('device')) setCfg('device', device);\n\n// Global Functions\nflow.set('setCfg', setCfg);\nflow.set('getCfg', getCfg);\nflow.set('getSensorId', getSensorId);\nflow.set('getModelId', getModelId);\nflow.set('beautifyModelId', beautifyModelId);\nflow.set('prepareTopic', prepareTopic);","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":60,"wires":[[]]},{"id":"032aeafa447c8a85","type":"inject","z":"41b7dde4f9feb336","name":"Init CFG","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"0","topic":"","payload":"","payloadType":"date","x":129,"y":60,"wires":[["1e460f33ac6377a3"]]},{"id":"6c6c68a34bafb5c9","type":"function","z":"41b7dde4f9feb336","name":"Property dispatcher","func":"const setCfg = flow.get('setCfg');\nconst getCfg = flow.get('getCfg');\nconst getModelId = flow.get('getModelId');\nconst getSensorId = flow.get('getSensorId');\n\nconst device = getCfg('device');\nconst deviceId = getCfg('deviceId');\n\nconst { data, sid, model, cmd } = msg.payload;\n\nconst sensors = {\n    status: 'status',\n    temperature: 'temperature',\n    humidity: 'humidity',\n    pressure: 'pressure',\n    channel_0: 'channel_0',\n    channel_1: 'channel_1',\n    plug_status: 'plug_status'\n};\nconst telemetries = {\n    voltage: 'voltage',\n    rotate: 'rotate',\n    power_consumed: 'power_consumed',\n    load_power: 'load_power',\n    inuse: 'inuse'\n};\nconst options = {\n    rgb: 'rgb'\n};\n\nif (model === 'plug') {\n    if (data.status) {\n        data.plug_status = data.status;\n        delete data.status;\n    }\n    if (data.voltage) delete data.voltage;\n}\nif (data['dual_channel']) {\n    let v;\n    \n    switch (data['dual_channel']) {\n        case 'long_both_click':\n            v = 'long_click';\n            break;\n        case 'both_click':\n            v = 'click';\n            break;\n        case 'double_both_click':\n            v = 'double_click';\n            break;\n        default:\n            break;\n    }   \n\n    if (v) {\n        data['channel_0'] = v;\n        data['channel_1'] = v;\n        delete data['dual_channel'];\n    }\n}\n\nconst sensorPayload = [];\nconst telemetryPayload = [];\nconst optionPayload = [];\nconst nodePayload = [];\nconst validId = Object.assign(sensors, telemetries, options);\n\nObject.keys(data).forEach(id => {\n    if (!validId[id]) return;\n\n    switch (id) {\n        default: {\n            const modelId = getModelId(model);\n            const sensorId = getSensorId(id, sid);\n            const isNewNode = !device.nodes?.[modelId] || false;\n            const isNewSensor = !device.nodes?.[modelId]?.[sensorId] || false;\n            const payload = {\n                sid,\n                model,\n                nodeId     : modelId,\n                value      : data[id],\n                propertyId : sensorId,\n                type       : id\n            };\n        \n            if (isNewNode) {\n                device.nodes[modelId] = {};\n                nodePayload.push({ isNew: isNewNode, modelId });\n            }\n            if (isNewSensor) device.nodes[modelId][sensorId] = sensorId;\n\n            if (sensors[id]) {\n                sensorPayload.push({payload, isNew: isNewSensor, modelId});\n            }\n            if (telemetries[id]) {\n                telemetryPayload.push({payload, isNew: isNewSensor});\n            }\n            break;\n        }\n    }\n});\n\nsetCfg('device', device);\n\nreturn [ nodePayload, sensorPayload, telemetryPayload, optionPayload ];","outputs":4,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":820,"wires":[["34c91674a6b89b73"],["bd772aea7157ccc5"],["b9acb8025bb6456b"],["f9f0ef64c2fb85c0"]]},{"id":"bd772aea7157ccc5","type":"function","z":"41b7dde4f9feb336","name":"Sensor","func":"const sensorsInfo = {\n    status : {\n        name     : 'Status',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'boolean',\n        unit     : '#',\n        format   : '',\n        value    : ''\n    },\n    humidity : {\n        name     : 'Humidity',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'float',\n        unit     : '%',\n        format   : '',\n        value    : ''\n    },\n    temperature : {\n        name     : 'Temperature',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'float',\n        unit     : 'Â°C',\n        format   : '',\n        value    : ''\n    },\n    pressure : {\n        name     : 'Pressure',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'float',\n        unit     : 'kpa',\n        format   : '',\n        value    : ''\n    },\n    plug_status: {\n        name     : 'Status',\n        settable : 'true',\n        retained : 'true',\n        dataType : 'boolean',\n        unit     : '#',\n        format   : '',\n        value    : ''\n    },\n    channel_0: {\n        name     : 'Left switch',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'string',\n        unit     : '#',\n        format   : '',\n        value    : ''\n    },\n    channel_1: {\n        name     : 'Right switch',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'string',\n        unit     : '#',\n        format   : '',\n        value    : ''\n    }\n};\nlet { value, propertyId, sid, type, nodeId, model } = msg.payload;\n\nconst sensor = sensorsInfo[type];\n\nif (!sensor) return;\n\nsensor.model = model;\nsensor.sid = sid;\nsensor.id = propertyId;\nsensor.nodeId = nodeId;\nsensor.type = 'sensor';\n\nif (value === 'unknown') value = '';\n\nif (['off','on'].includes(value)) {\n    value = value === 'on' ? 'true' : 'false';\n}\n\nif (['no_motion', 'motion'].includes(value)) {\n    value = value === 'motion' ? 'true' : 'false';\n}\n\nswitch (type) {\n    case 'humidity':\n    case 'temperature':\n        // HARDCODE xiaomi sending 10000 temp on init\n        sensor.value = value === '10000' ? '' : `${(value / 100).toFixed(1)}`;\n        break;\n    case 'pressure':\n        sensor.value = `${(value / 1000).toFixed(1)}`;\n        break;\n    case 'channel_0':\n        if (msg.model === 'remote.b186acn01' || msg.model === '86sw1') sensor.name = 'Switch';\n        sensor.value = value;\n        break;\n    default:\n        sensor.value = value;\n        break;\n}\n\nmsg.payload = sensor;\n\n// start \"no motion\" timeout\nif (model === 'motion' && value === 'true') {\n    const timerId = `timeout-${sid}`;\n    // reset prev timeout\n    clearTimeout(flow.get(timerId));\n\n    const timer = setTimeout(() => {\n        sensor.value = 'false';\n        msg.payload = sensor;\n        node.send(msg);\n    }, 30000); // 30s\n    flow.set(timerId, timer);\n}\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":981,"y":944,"wires":[["c789272ccbcfd361"]]},{"id":"b9acb8025bb6456b","type":"function","z":"41b7dde4f9feb336","name":"Telemetry","func":"const telemetryInfo = {\n    voltage : {\n        id       : 'battery',\n        name     : 'Battery',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'integer',\n        unit     : '%',\n        format   : '',\n        value    : ''\n    },\n    angle : {\n        id       : 'angle',\n        name     : 'Angle',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'integer',\n        unit     : 'Â°',\n        format   : '',\n        value    : ''\n    },\n    time : {\n        id       : 'time',\n        name     : 'Rotation time',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'integer',\n        unit     : 'ms',\n        format   : '',\n        value    : ''\n    },\n    power_consumed : {\n        id       : 'power-consumed',\n        name     : 'Power consumed',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'float',\n        unit     : 'W',\n        format   : '',\n        value    : ''\n    },\n    load_power : {\n        id       : 'load-power',\n        name     : 'Load power',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'float',\n        unit     : 'W',\n        format   : '',\n        value    : ''\n    },\n    inuse : {\n        id       : 'inuse',\n        name     : 'In-use',\n        settable : 'false',\n        retained : 'true',\n        dataType : 'string',\n        unit     : '#',\n        format   : '',\n        value    : ''\n    }\n};\n\nfunction batteryLvl(voltage) {\n    const VOLTAGE_MAX = global.get('VOLTAGE_MAX');\n    const VOLTAGE_MIN = global.get('VOLTAGE_MIN');\n    const val = +voltage;\n    const lvl = ((val - VOLTAGE_MIN) / (VOLTAGE_MAX - VOLTAGE_MIN) * 100).toFixed(0);\n\n    return Number(lvl) > 100 ? 100 : lvl;\n}\n\nconst { value, propertyId, sid, nodeId, type, model } = msg.payload;\nconst telemetry = telemetryInfo[type];\n\nif (!telemetry) return null;\n\nswitch (propertyId) {\n    case 'inuse':\n        telemetry.value = value === '1' ? 'true' : 'false';\n        break;\n    case 'voltage':\n        telemetry.value = batteryLvl(value);\n        break;\n    default:\n        telemetry.value = value;\n        break;\n}\n\nif (nodeId) telemetry.nodeId = nodeId;\n\ntelemetry.model = model;\ntelemetry.sid = sid;\ntelemetry.type = 'telemetry';\n\nmsg.payload = telemetry;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":980.4998359680176,"y":1004.0001630783081,"wires":[["c789272ccbcfd361"]]},{"id":"c789272ccbcfd361","type":"function","z":"41b7dde4f9feb336","name":"Prepare topic","func":"const getCfg = flow.get('getCfg');\nconst setCfg = flow.get('setCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\nconst topicSID = getCfg('TOPIC_SID_MAP');\nconst { id, nodeId, type, sid, model } = msg.payload;\nconst baseTopic = nodeId ? `${rootTopic}/${deviceId}/${nodeId}` : `${rootTopic}/${deviceId}`;\n\nswitch (type) {\n    case 'sensor':\n        msg.payload.topic = `${baseTopic}/${id}`;\n        break;\n    case 'options':\n    case 'telemetry':\n        msg.payload.topic = `${baseTopic}/$${type}/${id}`;\n        break;\n    default:\n        break;\n}\n\ntopicSID[msg.payload.topic] = {\n    sid,\n    model\n};\n\nsetCfg('TOPIC_SID_MAP', topicSID);\n\n// return msg.isNew ? [msg, msg] : [null, msg];\nreturn [msg, msg];","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1181,"y":1004,"wires":[["0242f5e638eef0e7","71dbe32c76820517","9201e804abeb4fbf","9409dcc4a76bb84a","445e7481cd09ba87","a26dcb1d554c3e0d"],["212c4d122d722af2"]]},{"id":"71dbe32c76820517","type":"function","z":"41b7dde4f9feb336","name":"Settable","func":"const { topic, settable } = msg.payload;\n\nmsg.payload = settable;\nmsg.topic = `${topic}/$settable`;\n\nreturn msg;","outputs":1,"noerr":0,"x":1421.7603759765625,"y":893.9896240234375,"wires":[["07b10b0d928a02b7"]]},{"id":"9201e804abeb4fbf","type":"function","z":"41b7dde4f9feb336","name":"Retained","func":"const { topic, retained } = msg.payload;\n\nmsg.payload = retained;\nmsg.topic = `${topic}/$retained`;\n\nreturn msg;","outputs":1,"noerr":0,"x":1420.7603759765625,"y":943.9896240234375,"wires":[["07b10b0d928a02b7"]]},{"id":"9409dcc4a76bb84a","type":"function","z":"41b7dde4f9feb336","name":"Data type","func":"const { topic, dataType } = msg.payload;\n\nmsg.payload = dataType;\nmsg.topic = `${topic}/$datatype`;\n\nreturn msg;","outputs":1,"noerr":0,"x":1419.7603759765625,"y":991.9896240234375,"wires":[["07b10b0d928a02b7"]]},{"id":"445e7481cd09ba87","type":"function","z":"41b7dde4f9feb336","name":"Unit","func":"const { topic, unit } = msg.payload;\n\nmsg.payload = unit;\nmsg.topic = `${topic}/$unit`;\n\nreturn msg;","outputs":1,"noerr":0,"x":1411.7603759765625,"y":1035.9896240234375,"wires":[["07b10b0d928a02b7"]]},{"id":"a26dcb1d554c3e0d","type":"function","z":"41b7dde4f9feb336","name":"Format","func":"const { topic, format } = msg.payload;\n\nmsg.payload = format;\nmsg.topic = `${topic}/$format`;\n\nreturn msg;","outputs":1,"noerr":0,"x":1421.7603759765625,"y":1084.9896240234375,"wires":[["07b10b0d928a02b7"]]},{"id":"212c4d122d722af2","type":"function","z":"41b7dde4f9feb336","name":"Value","func":"const { topic, value } = msg.payload;\n\nmsg.payload = `${value}`;\nmsg.topic = topic;\n\nreturn msg;","outputs":1,"noerr":0,"x":1413.760311126709,"y":1177.9896230697632,"wires":[["07b10b0d928a02b7"]]},{"id":"0242f5e638eef0e7","type":"function","z":"41b7dde4f9feb336","name":"Name","func":"const { name, topic } = msg.payload;\n\nmsg.payload = name;\nmsg.topic = `${topic}/$name`;\n\nreturn msg;","outputs":1,"noerr":0,"x":1411,"y":844,"wires":[["07b10b0d928a02b7"]]},{"id":"f9f0ef64c2fb85c0","type":"function","z":"41b7dde4f9feb336","name":"Option","func":"const optionInfo = {\n    rgb : {\n        id       : 'rgb',\n        name     : 'Color',\n        settable : 'true',\n        retained : 'true',\n        dataType : 'color',\n        unit     : '#',\n        format   : 'rgb',\n        value    : ''\n    },\n    brightness : {\n        id       : 'brightness',\n        name     : 'Brightness',\n        settable : 'true',\n        retained : 'true',\n        dataType : 'integer',\n        unit     : '%',\n        format   : '0:100',\n        value    : ''\n    },\n    switcher : {\n        id       : 'switch',\n        name     : 'Switch',\n        settable : 'true',\n        retained : 'true',\n        dataType : 'boolean',\n        unit     : '#',\n        format   : '',\n        value    : ''\n    }\n};\n\nconst { value, propertyId, nodeId, type, sid, model } = msg.payload;\nconst option = optionInfo[type];\n\nif (!option) return null;\n\nif (nodeId) option.nodeId = nodeId;\n\noption.value = value;\noption.type = 'options';\noption.sid = sid;\noption.model = model;\n\nmsg.payload = option;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":972.017333984375,"y":1059.6770181655884,"wires":[["c789272ccbcfd361"]]},{"id":"34c91674a6b89b73","type":"function","z":"41b7dde4f9feb336","name":"Prepare node topics","func":"if (!msg.isNew) return; // skip duplicated publish\n\nconst beautifyModelId = flow.get('beautifyModelId');\nconst payload = {\n    id : msg.modelId,\n    state: 'ready',\n    name: beautifyModelId(msg.modelId)\n}\n\nreturn { payload };\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1161,"y":704,"wires":[["56df354cfc4cd36a","2e0b4ad1e8ae573a","22e5fc9c49a5181b"]]},{"id":"56df354cfc4cd36a","type":"function","z":"41b7dde4f9feb336","name":"Name","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\nconst { id, name } = msg.payload;\n\nmsg.payload = name;\nmsg.topic = `${rootTopic}/${deviceId}/${id}/$name`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1412,"y":658,"wires":[["07b10b0d928a02b7"]]},{"id":"2e0b4ad1e8ae573a","type":"function","z":"41b7dde4f9feb336","name":"State","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\nconst { id, state } = msg.payload;\n\nmsg.payload = state;\nmsg.topic = `${rootTopic}/${deviceId}/${id}/$state`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1411,"y":704,"wires":[["07b10b0d928a02b7"]]},{"id":"22e5fc9c49a5181b","type":"function","z":"41b7dde4f9feb336","name":"Type","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\nconst { id } = msg.payload;\n\nmsg.payload = '-';\nmsg.topic = `${rootTopic}/${deviceId}/${id}/$type`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1410,"y":754,"wires":[["07b10b0d928a02b7"]]},{"id":"294ba29c49caf8ab","type":"function","z":"41b7dde4f9feb336","name":"Name","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.name;\nmsg.topic = `${rootTopic}/${deviceId}/$name`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1411,"y":284,"wires":[["07b10b0d928a02b7"]]},{"id":"c92db23cf7948782","type":"function","z":"41b7dde4f9feb336","name":"State","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.state;\nmsg.topic = `${rootTopic}/${deviceId}/$state`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1411,"y":330,"wires":[["07b10b0d928a02b7"]]},{"id":"0ad0d4b57b31b3d0","type":"function","z":"41b7dde4f9feb336","name":"MAC address","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.mac;\nmsg.topic = `${rootTopic}/${deviceId}/$mac`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1440,"y":380,"wires":[["07b10b0d928a02b7"]]},{"id":"1bdac021d0cfe392","type":"function","z":"41b7dde4f9feb336","name":"Local IP","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.localIp;\nmsg.topic = `${rootTopic}/${deviceId}/$localip`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1419,"y":428,"wires":[["07b10b0d928a02b7"]]},{"id":"e40bcb691c2dfe6e","type":"function","z":"41b7dde4f9feb336","name":"Implementation","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.implementation;\nmsg.topic = `${rootTopic}/${deviceId}/$implementation`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1441,"y":472,"wires":[["07b10b0d928a02b7"]]},{"id":"894736c6476f736c","type":"function","z":"41b7dde4f9feb336","name":"Firmware name","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.firmwareName;\nmsg.topic = `${rootTopic}/${deviceId}/$fw/name`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1441,"y":521,"wires":[["07b10b0d928a02b7"]]},{"id":"2b1bffb59c91850b","type":"function","z":"41b7dde4f9feb336","name":"Firmware version","func":"const getCfg = flow.get('getCfg');\n\nconst rootTopic = getCfg('rootTopic');\nconst deviceId = getCfg('deviceId');\n\nmsg.payload = msg.payload.firmwareVersion;\nmsg.topic = `${rootTopic}/${deviceId}/$fw/version`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1450,"y":573,"wires":[["07b10b0d928a02b7"]]},{"id":"af0e1e876790ddfb","type":"function","z":"41b7dde4f9feb336","name":"Device initialization","func":"const getCfg = flow.get('getCfg');\nconst device = getCfg('device');\n\nmsg.payload = device;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":400,"wires":[["294ba29c49caf8ab","c92db23cf7948782","0ad0d4b57b31b3d0","1bdac021d0cfe392","e40bcb691c2dfe6e","894736c6476f736c","2b1bffb59c91850b"]]},{"id":"0ac1aded56e535e7","type":"status","z":"41b7dde4f9feb336","name":"Cloud MQTT status","scope":["25b3692d6f91a4a2"],"x":150,"y":280,"wires":[["10046bdb90d070d6"]]},{"id":"10046bdb90d070d6","type":"function","z":"41b7dde4f9feb336","name":"Cloud MQTT handler","func":"const setCfg = flow.get('setCfg');\nconst mqttStatusList = {\n    CONNECTED    : 'node-red:common.status.connected',\n    CONNECTING   : 'node-red:common.status.connecting',\n    DISCONNECTED : 'node-red:common.status.disconnected'\n};\n\nconst { status: { text } } = msg;\nlet connected = false;\n\nswitch (text) {\n    case mqttStatusList.CONNECTED:\n        setCfg('CLOUD_MQTT_CONNECTED', true);\n        connected = true;\n        break;\n    default:\n        setCfg('CLOUD_MQTT_CONNECTED', false);\n        break;\n}\n\nreturn { payload: { connected } };","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":280,"wires":[["d7a30a5a2cb9db47"]]},{"id":"12ace303148294a6","type":"function","z":"41b7dde4f9feb336","name":"Subscribe to Cloud topics","func":"const prepareTopic = flow.get('prepareTopic');\n\nreturn [\n    {\n        action: 'subscribe',\n        topic: [\n            prepareTopic(`+/+/set`),\n            prepareTopic(`+/$options/+/set`),\n            prepareTopic(`+/$telemetry/+/set`),\n        ]\n    }\n];","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":280,"wires":[["25b3692d6f91a4a2"]]},{"id":"5534d23470b7257a","type":"inject","z":"41b7dde4f9feb336","name":"subscribe trigger","props":[],"repeat":"","crontab":"","once":true,"onceDelay":"2","topic":"","x":150,"y":180,"wires":[["5c84fc22c0d7895b"]]},{"id":"5c84fc22c0d7895b","type":"function","z":"41b7dde4f9feb336","name":"Connect to Cloud Broker","func":"const getCfg = flow.get('getCfg');\n\nif (!getCfg('MQTT_USER') || !getCfg('MQTT_PASS')) return;\n\nreturn [\n    {\n        \"action\": \"connect\",\n        \"broker\": {\n            \"url\": getCfg('MQTT_URI'),\n            \"keepalive\": 30,\n            \"clean\": true,\n            \"username\": getCfg('MQTT_USER'),\n            \"password\": getCfg('MQTT_PASS'),\n            \"will\": {\n                \"topic\": `${getCfg('rootTopic')}/${getCfg('deviceId')}/$state`,\n                \"qos\": 0,\n                \"retain\": true,\n                \"payload\": \"lost\"\n            }\n        }\n    }\n];","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":180,"wires":[["25b3692d6f91a4a2"]]},{"id":"25b3692d6f91a4a2","type":"mqtt in","z":"41b7dde4f9feb336","name":"Cloud MQTT","topic":"","qos":"2","datatype":"auto-detect","broker":"ffc6d47eeb474ee7","nl":false,"rap":true,"rh":0,"inputs":1,"x":730,"y":180,"wires":[[]]},{"id":"d7a30a5a2cb9db47","type":"function","z":"41b7dde4f9feb336","name":"On cloud mqtt connect handler","func":"return msg?.payload?.connected ? { payload: {} } : null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":360,"wires":[["12ace303148294a6","af0e1e876790ddfb"]]},{"id":"d360ef9b30336ca0","type":"mqtt out","z":"41b7dde4f9feb336","name":"Cloud MQTT Publish","topic":"","qos":"","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"ffc6d47eeb474ee7","x":2301,"y":684,"wires":[]},{"id":"07b10b0d928a02b7","type":"function","z":"41b7dde4f9feb336","name":"Topics mapper","func":"// console.log({ ...msg, retain: true });\n\nreturn { ...msg, retain: true };","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1801,"y":684,"wires":[["d360ef9b30336ca0"]]},{"id":"635ee17db10aa74a","type":"inject","z":"41b7dde4f9feb336","name":"Heartbeat","props":[],"repeat":"5","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":1831,"y":864,"wires":[["5d65a4f10b36fbcf"]]},{"id":"5d65a4f10b36fbcf","type":"function","z":"41b7dde4f9feb336","name":"Heartbeat","func":"const getCfg = flow.get('getCfg');\nconst device = getCfg('device');\n\nif (device.state !== 'ready') return;\n\nconst prepareTopic = flow.get('prepareTopic');\n\nreturn { payload: 'p', topic: prepareTopic('$heartbeat') };","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":2041,"y":864,"wires":[["d360ef9b30336ca0"]]},{"id":"b97eadcd920b4134","type":"status","z":"41b7dde4f9feb336","name":"Gateway status handler","scope":["c9a629ca753514f9"],"x":140,"y":620,"wires":[["53045507be3f6a65"]]},{"id":"53045507be3f6a65","type":"function","z":"41b7dde4f9feb336","name":"Update gateway status","func":"const getCfg = flow.get('getCfg');\nconst setCfg = flow.get('setCfg');\nconst device = getCfg('device');\nconst { status: { fill } } = msg;\n\nif (fill === 'green' && getCfg('gwStatus') !== 'connected') {\n    setCfg('gwStatus', 'connected');\n    device.state = 'ready';\n    return ({ payload: { state: 'ready' }});\n}\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":620,"wires":[["c92db23cf7948782"]]}]